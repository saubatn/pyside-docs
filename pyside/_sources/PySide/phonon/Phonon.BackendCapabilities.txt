.. module:: PySide.phonon
.. _Phonon.BackendCapabilities:

Phonon.BackendCapabilities
**************************

.. inheritance-diagram:: Phonon.BackendCapabilities
    :parts: 2

Synopsis
--------

Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`availableAudioCaptureDevices<PySide.phonon.Phonon.BackendCapabilities.availableAudioCaptureDevices>` ()
*    def :meth:`availableAudioEffects<PySide.phonon.Phonon.BackendCapabilities.availableAudioEffects>` ()
*    def :meth:`availableAudioOutputDevices<PySide.phonon.Phonon.BackendCapabilities.availableAudioOutputDevices>` ()
*    def :meth:`availableMimeTypes<PySide.phonon.Phonon.BackendCapabilities.availableMimeTypes>` ()
*    def :meth:`isMimeTypeAvailable<PySide.phonon.Phonon.BackendCapabilities.isMimeTypeAvailable>` (mimeType)
*    def :meth:`notifier<PySide.phonon.Phonon.BackendCapabilities.notifier>` ()


Detailed Description
--------------------



    The :ref:`BackendCapabilities<phonon-backendcapabilities.html>` namespace contains functions to describe the capabilities of the multimedia backend.


.. staticmethod:: PySide.phonon.Phonon.BackendCapabilities.availableAudioCaptureDevices()


    :rtype: 






.. staticmethod:: PySide.phonon.Phonon.BackendCapabilities.availableAudioEffects()


    :rtype: 




    Returns descriptions for the audio effects the backend supports.

    Returns A list of AudioEffectDescription objects that give a name and description for every supported audio effect.



.. staticmethod:: PySide.phonon.Phonon.BackendCapabilities.availableAudioOutputDevices()


    :rtype: 




    Returns the audio output devices the backend supports.

    Returns A list of :class:`~PySide.phonon.Phonon.AudioOutputDevice` objects that give a name and description for every supported audio output device.



.. staticmethod:: PySide.phonon.Phonon.BackendCapabilities.availableMimeTypes()


    :rtype: list of strings




    Returns a list of mime types that the Backend can decode.

    .. seealso::  :meth:`PySide.phonon.Phonon::BackendCapabilities.isMimeTypeAvailable` 


.. staticmethod:: PySide.phonon.Phonon.BackendCapabilities.isMimeTypeAvailable(mimeType)


    :param mimeType: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Often all you want to know is whether one given MIME type can be decoded by the backend. Use this method in favor of :meth:`PySide.phonon.Phonon::BackendCapabilities.availableMimeTypes` as it can give you a negative answer without having a backend loaded.

    Returns true if the given ``mimeType`` is supported by the backend; otherwise, returns false.

    .. seealso::  :meth:`PySide.phonon.Phonon::BackendCapabilities.availableMimeTypes` 


.. staticmethod:: PySide.phonon.Phonon.BackendCapabilities.notifier()


    :rtype: :class:`PySide.phonon.Notifier`




    Use this function to get a :class:`PySide.QtCore.QObject` pointer to connect to the capabilitiesChanged signal.

    Returns a pointer to a :class:`PySide.QtCore.QObject` .

    The capabilitiesChanged signal is emitted if the capabilities have changed. This can happen if the user has requested a backend change.

    To connect to this signal do the following:

    ::

        <Code snippet "doc/src/snippets/code/doc_src_phonon-api.cpp:16" not found>

    .. seealso::  :meth:`Notifier.capabilitiesChanged()<PySide.phonon.Notifier.capabilitiesChanged>` 



