.. module:: PySide.phonon
.. _Phonon.PlatformPlugin:

Phonon.PlatformPlugin
*********************

.. inheritance-diagram:: Phonon.PlatformPlugin
    :parts: 2

Detailed Description
--------------------




.. class:: PySide.phonon.Phonon.PlatformPlugin()




.. method:: PySide.phonon.Phonon.PlatformPlugin.applicationName()


    :rtype: unicode




    Returns the name of the application. For most Qt application this is :meth:`QCoreApplication.applicationName()<PySide.QtCore.QCoreApplication.applicationName>` , but for KDE this is overridden by KAboutData.



.. method:: PySide.phonon.Phonon.PlatformPlugin.createBackend(library, version)


    :param library: unicode
    :param version: unicode
    :rtype: :class:`PySide.QtCore.QObject`




    Using the library loader of the platform, loads a given backend provided the specified ``library`` and ``version`` .



.. method:: PySide.phonon.Phonon.PlatformPlugin.createBackend()


    :rtype: :class:`PySide.QtCore.QObject`




    Creates a backend object. This way the platform can decide the backend preference.



.. method:: PySide.phonon.Phonon.PlatformPlugin.createMediaStream(url, parent)


    :param url: :class:`PySide.QtCore.QUrl`
    :param parent: :class:`PySide.QtCore.QObject`
    :rtype: :class:`PySide.phonon.Phonon::AbstractMediaStream`




    Creates a :class:`~PySide.phonon.Phonon.AbstractMediaStream` object with the given ``parent`` that provides the data for the given URL specified by ``url`` .



.. method:: PySide.phonon.Phonon.PlatformPlugin.deviceAccessListFor(arg__1)


    :param arg__1: :class:`PySide.phonon.Phonon::AudioOutputDevice`
    :rtype: 







.. method:: PySide.phonon.Phonon.PlatformPlugin.icon(name)


    :param name: unicode
    :rtype: :class:`PySide.QtGui.QIcon`




    Returns the icon for the given icon name.



.. method:: PySide.phonon.Phonon.PlatformPlugin.isMimeTypeAvailable(mimeType)


    :param mimeType: unicode
    :rtype: :class:`PySide.QtCore.bool`




    Tries to check whether the default backend supports the MIME type specified by ``mimeType`` without loading the actual backend library.



.. method:: PySide.phonon.Phonon.PlatformPlugin.loadVolume(outputName)


    :param outputName: unicode
    :rtype: :class:`PySide.QtCore.qreal`




    Loads the volume for the given output.



.. method:: PySide.phonon.Phonon.PlatformPlugin.notification(notificationName, text[, actions=list()[, receiver=None[, actionSlot=0]]])


    :param notificationName: str
    :param text: unicode
    :param actions: list of strings
    :param receiver: :class:`PySide.QtCore.QObject`
    :param actionSlot: str




    Shows a notification pop-up with the given ``notificationName`` and ``text`` . Each action in the associated list of ``actions`` is connected to the ``actionSlot`` of the specified ``receiver`` object, which is expected to act on the actions as they are triggered by the user.



.. method:: PySide.phonon.Phonon.PlatformPlugin.objectDescriptionIndexes(type)


    :param type: :attr:`PySide.phonon.Phonon.ObjectDescriptionType`
    :rtype: 






.. method:: PySide.phonon.Phonon.PlatformPlugin.objectDescriptionProperties(type, index)


    :param type: :attr:`PySide.phonon.Phonon.ObjectDescriptionType`
    :param index: :class:`PySide.QtCore.int`
    :rtype: 






.. method:: PySide.phonon.Phonon.PlatformPlugin.saveVolume(outputName, volume)


    :param outputName: unicode
    :param volume: :class:`PySide.QtCore.qreal`




    Saves the volume for the given output.




