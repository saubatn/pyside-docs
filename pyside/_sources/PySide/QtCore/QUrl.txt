.. module:: PySide.QtCore
.. _QUrl:

QUrl
****

.. inheritance-diagram:: QUrl
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`__eq__<PySide.QtCore.QUrl.__eq__>` (url)
*    def :meth:`__lt__<PySide.QtCore.QUrl.__lt__>` (url)
*    def :meth:`__ne__<PySide.QtCore.QUrl.__ne__>` (url)
*    def :meth:`__reduce__<PySide.QtCore.QUrl.__reduce__>` ()
*    def :meth:`__repr__<PySide.QtCore.QUrl.__repr__>` ()
*    def :meth:`addEncodedQueryItem<PySide.QtCore.QUrl.addEncodedQueryItem>` (key, value)
*    def :meth:`addQueryItem<PySide.QtCore.QUrl.addQueryItem>` (key, value)
*    def :meth:`allEncodedQueryItemValues<PySide.QtCore.QUrl.allEncodedQueryItemValues>` (key)
*    def :meth:`allQueryItemValues<PySide.QtCore.QUrl.allQueryItemValues>` (key)
*    def :meth:`authority<PySide.QtCore.QUrl.authority>` ()
*    def :meth:`clear<PySide.QtCore.QUrl.clear>` ()
*    def :meth:`encodedFragment<PySide.QtCore.QUrl.encodedFragment>` ()
*    def :meth:`encodedHost<PySide.QtCore.QUrl.encodedHost>` ()
*    def :meth:`encodedPassword<PySide.QtCore.QUrl.encodedPassword>` ()
*    def :meth:`encodedPath<PySide.QtCore.QUrl.encodedPath>` ()
*    def :meth:`encodedQuery<PySide.QtCore.QUrl.encodedQuery>` ()
*    def :meth:`encodedQueryItemValue<PySide.QtCore.QUrl.encodedQueryItemValue>` (key)
*    def :meth:`encodedQueryItems<PySide.QtCore.QUrl.encodedQueryItems>` ()
*    def :meth:`encodedUserName<PySide.QtCore.QUrl.encodedUserName>` ()
*    def :meth:`errorString<PySide.QtCore.QUrl.errorString>` ()
*    def :meth:`fragment<PySide.QtCore.QUrl.fragment>` ()
*    def :meth:`hasEncodedQueryItem<PySide.QtCore.QUrl.hasEncodedQueryItem>` (key)
*    def :meth:`hasFragment<PySide.QtCore.QUrl.hasFragment>` ()
*    def :meth:`hasQuery<PySide.QtCore.QUrl.hasQuery>` ()
*    def :meth:`hasQueryItem<PySide.QtCore.QUrl.hasQueryItem>` (key)
*    def :meth:`host<PySide.QtCore.QUrl.host>` ()
*    def :meth:`isEmpty<PySide.QtCore.QUrl.isEmpty>` ()
*    def :meth:`isLocalFile<PySide.QtCore.QUrl.isLocalFile>` ()
*    def :meth:`isParentOf<PySide.QtCore.QUrl.isParentOf>` (url)
*    def :meth:`isRelative<PySide.QtCore.QUrl.isRelative>` ()
*    def :meth:`isValid<PySide.QtCore.QUrl.isValid>` ()
*    def :meth:`password<PySide.QtCore.QUrl.password>` ()
*    def :meth:`path<PySide.QtCore.QUrl.path>` ()
*    def :meth:`port<PySide.QtCore.QUrl.port>` ()
*    def :meth:`port<PySide.QtCore.QUrl.port>` (defaultPort)
*    def :meth:`queryItemValue<PySide.QtCore.QUrl.queryItemValue>` (key)
*    def :meth:`queryItems<PySide.QtCore.QUrl.queryItems>` ()
*    def :meth:`queryPairDelimiter<PySide.QtCore.QUrl.queryPairDelimiter>` ()
*    def :meth:`queryValueDelimiter<PySide.QtCore.QUrl.queryValueDelimiter>` ()
*    def :meth:`removeAllEncodedQueryItems<PySide.QtCore.QUrl.removeAllEncodedQueryItems>` (key)
*    def :meth:`removeAllQueryItems<PySide.QtCore.QUrl.removeAllQueryItems>` (key)
*    def :meth:`removeEncodedQueryItem<PySide.QtCore.QUrl.removeEncodedQueryItem>` (key)
*    def :meth:`removeQueryItem<PySide.QtCore.QUrl.removeQueryItem>` (key)
*    def :meth:`resolved<PySide.QtCore.QUrl.resolved>` (relative)
*    def :meth:`scheme<PySide.QtCore.QUrl.scheme>` ()
*    def :meth:`setAuthority<PySide.QtCore.QUrl.setAuthority>` (authority)
*    def :meth:`setEncodedFragment<PySide.QtCore.QUrl.setEncodedFragment>` (fragment)
*    def :meth:`setEncodedHost<PySide.QtCore.QUrl.setEncodedHost>` (host)
*    def :meth:`setEncodedPassword<PySide.QtCore.QUrl.setEncodedPassword>` (password)
*    def :meth:`setEncodedPath<PySide.QtCore.QUrl.setEncodedPath>` (path)
*    def :meth:`setEncodedQuery<PySide.QtCore.QUrl.setEncodedQuery>` (query)
*    def :meth:`setEncodedQueryItems<PySide.QtCore.QUrl.setEncodedQueryItems>` (query)
*    def :meth:`setEncodedUrl<PySide.QtCore.QUrl.setEncodedUrl>` (url)
*    def :meth:`setEncodedUrl<PySide.QtCore.QUrl.setEncodedUrl>` (url, mode)
*    def :meth:`setEncodedUserName<PySide.QtCore.QUrl.setEncodedUserName>` (userName)
*    def :meth:`setFragment<PySide.QtCore.QUrl.setFragment>` (fragment)
*    def :meth:`setHost<PySide.QtCore.QUrl.setHost>` (host)
*    def :meth:`setPassword<PySide.QtCore.QUrl.setPassword>` (password)
*    def :meth:`setPath<PySide.QtCore.QUrl.setPath>` (path)
*    def :meth:`setPort<PySide.QtCore.QUrl.setPort>` (port)
*    def :meth:`setQueryDelimiters<PySide.QtCore.QUrl.setQueryDelimiters>` (valueDelimiter, pairDelimiter)
*    def :meth:`setQueryItems<PySide.QtCore.QUrl.setQueryItems>` (query)
*    def :meth:`setScheme<PySide.QtCore.QUrl.setScheme>` (scheme)
*    def :meth:`setUrl<PySide.QtCore.QUrl.setUrl>` (url)
*    def :meth:`setUrl<PySide.QtCore.QUrl.setUrl>` (url, mode)
*    def :meth:`setUserInfo<PySide.QtCore.QUrl.setUserInfo>` (userInfo)
*    def :meth:`setUserName<PySide.QtCore.QUrl.setUserName>` (userName)
*    def :meth:`swap<PySide.QtCore.QUrl.swap>` (other)
*    def :meth:`toEncoded<PySide.QtCore.QUrl.toEncoded>` ([options=QUrl.None])
*    def :meth:`toLocalFile<PySide.QtCore.QUrl.toLocalFile>` ()
*    def :meth:`toString<PySide.QtCore.QUrl.toString>` ([options=QUrl.None])
*    def :meth:`topLevelDomain<PySide.QtCore.QUrl.topLevelDomain>` ()
*    def :meth:`userInfo<PySide.QtCore.QUrl.userInfo>` ()
*    def :meth:`userName<PySide.QtCore.QUrl.userName>` ()


Static functions
^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`fromAce<PySide.QtCore.QUrl.fromAce>` (arg__1)
*    def :meth:`fromEncoded<PySide.QtCore.QUrl.fromEncoded>` (url)
*    def :meth:`fromEncoded<PySide.QtCore.QUrl.fromEncoded>` (url, mode)
*    def :meth:`fromLocalFile<PySide.QtCore.QUrl.fromLocalFile>` (localfile)
*    def :meth:`fromPercentEncoding<PySide.QtCore.QUrl.fromPercentEncoding>` (arg__1)
*    def :meth:`fromPunycode<PySide.QtCore.QUrl.fromPunycode>` (arg__1)
*    def :meth:`fromUserInput<PySide.QtCore.QUrl.fromUserInput>` (userInput)
*    def :meth:`idnWhitelist<PySide.QtCore.QUrl.idnWhitelist>` ()
*    def :meth:`setIdnWhitelist<PySide.QtCore.QUrl.setIdnWhitelist>` (arg__1)
*    def :meth:`toAce<PySide.QtCore.QUrl.toAce>` (arg__1)
*    def :meth:`toPercentEncoding<PySide.QtCore.QUrl.toPercentEncoding>` (arg__1[, exclude=QByteArray()[, include=QByteArray()]])
*    def :meth:`toPunycode<PySide.QtCore.QUrl.toPunycode>` (arg__1)


Detailed Description
--------------------



    The :class:`PySide.QtCore.QUrl` class provides a convenient interface for working with URLs.

    It can parse and construct URLs in both encoded and unencoded form. :class:`PySide.QtCore.QUrl` also has support for internationalized domain names (IDNs).

    The most common way to use :class:`PySide.QtCore.QUrl` is to initialize it via the constructor by passing a :class:`PySide.QtCore.QString` . Otherwise, :meth:`PySide.QtCore.QUrl.setUrl` and :meth:`PySide.QtCore.QUrl.setEncodedUrl` can also be used.

    URLs can be represented in two forms: encoded or unencoded. The unencoded representation is suitable for showing to users, but the encoded representation is typically what you would send to a web server. For example, the unencoded URL "http://b√ºhler.example.com" would be sent to the server as "http://xn--bhler-kva.example.com/List%20of%20applicants.xml".

    A URL can also be constructed piece by piece by calling :meth:`PySide.QtCore.QUrl.setScheme` , :meth:`PySide.QtCore.QUrl.setUserName` , :meth:`PySide.QtCore.QUrl.setPassword` , :meth:`PySide.QtCore.QUrl.setHost` , :meth:`PySide.QtCore.QUrl.setPort` , :meth:`PySide.QtCore.QUrl.setPath` , :meth:`PySide.QtCore.QUrl.setEncodedQuery` and :meth:`PySide.QtCore.QUrl.setFragment` . Some convenience functions are also available: :meth:`PySide.QtCore.QUrl.setAuthority` sets the user name, password, host and port. :meth:`PySide.QtCore.QUrl.setUserInfo` sets the user name and password at once.

    Call :meth:`PySide.QtCore.QUrl.isValid` to check if the URL is valid. This can be done at any point during the constructing of a URL.

    Constructing a query is particularly convenient through the use of :meth:`PySide.QtCore.QUrl.setQueryItems` , :meth:`PySide.QtCore.QUrl.addQueryItem` and :meth:`PySide.QtCore.QUrl.removeQueryItem` . Use :meth:`PySide.QtCore.QUrl.setQueryDelimiters` to customize the delimiters used for generating the query string.

    For the convenience of generating encoded URL strings or query strings, there are two static functions called :meth:`PySide.QtCore.QUrl.fromPercentEncoding` and :meth:`PySide.QtCore.QUrl.toPercentEncoding` which deal with percent encoding and decoding of QStrings.

    Calling :meth:`PySide.QtCore.QUrl.isRelative` will tell whether or not the URL is relative. A relative URL can be resolved by passing it as argument to :meth:`PySide.QtCore.QUrl.resolved` , which returns an absolute URL. :meth:`PySide.QtCore.QUrl.isParentOf` is used for determining whether one URL is a parent of another.

    :meth:`PySide.QtCore.QUrl.fromLocalFile` constructs a :class:`PySide.QtCore.QUrl` by parsing a local file path. :meth:`PySide.QtCore.QUrl.toLocalFile` converts a URL to a local file path.

    The human readable representation of the URL is fetched with :meth:`PySide.QtCore.QUrl.toString` . This representation is appropriate for displaying a URL to a user in unencoded form. The encoded form however, as returned by :meth:`PySide.QtCore.QUrl.toEncoded` , is for internal use, passing to web servers, mail clients and so on.

    :class:`PySide.QtCore.QUrl` conforms to the URI specification from :ref:`RFC 3986<http://www.rfc-editor.org/rfc/rfc3986.txt>` (Uniform Resource Identifier: Generic Syntax), and includes scheme extensions from :ref:`RFC 1738<http://www.rfc-editor.org/rfc/rfc1738.txt>` (Uniform Resource Locators). Case folding rules in :class:`PySide.QtCore.QUrl` conform to :ref:`RFC 3491<http://www.rfc-editor.org/rfc/rfc3491.txt>` (Nameprep: A Stringprep Profile for Internationalized Domain Names (IDN)).

    .. _PySide.QtCore.QUrl_character-conversions:



Character Conversions
^^^^^^^^^^^^^^^^^^^^^

    Follow these rules to avoid erroneous character conversion when dealing with URLs and strings:


    * When creating an :class:`PySide.QtCore.QString` to contain a URL from a :class:`PySide.QtCore.QByteArray` or a char\*, always use :meth:`QString.fromUtf8` .
    * Favor the use of :meth:`QUrl.fromEncoded()<PySide.QtCore.QUrl.fromEncoded>` and :meth:`QUrl.toEncoded()<PySide.QtCore.QUrl.toEncoded>` instead of :class:`PySide.QtCore.QUrl` (string) and :meth:`QUrl.toString()<PySide.QtCore.QUrl.toString>` when converting a :class:`PySide.QtCore.QUrl` to or from a string.


.. class:: QUrl()
           QUrl(url)
           QUrl(url, mode)
           QUrl(copy)

    :param mode: :attr:`PySide.QtCore.QUrl.ParsingMode`
    :param copy: :class:`PySide.QtCore.QUrl`
    :param url: unicode









.. attribute:: PySide.QtCore.QUrl.ParsingMode



.. attribute:: PySide.QtCore.QUrl.FormattingOption



.. method:: PySide.QtCore.QUrl.__reduce__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QUrl.__repr__()


    :rtype: :class:`PyObject`







.. method:: PySide.QtCore.QUrl.addEncodedQueryItem(key, value)


    :param key: :class:`PySide.QtCore.QByteArray`
    :param value: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.addQueryItem(key, value)


    :param key: unicode
    :param value: unicode







.. method:: PySide.QtCore.QUrl.allEncodedQueryItemValues(key)


    :param key: :class:`PySide.QtCore.QByteArray`
    :rtype: 







.. method:: PySide.QtCore.QUrl.allQueryItemValues(key)


    :param key: unicode
    :rtype: list of strings







.. method:: PySide.QtCore.QUrl.authority()


    :rtype: unicode







.. method:: PySide.QtCore.QUrl.clear()









.. method:: PySide.QtCore.QUrl.encodedFragment()


    :rtype: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.encodedHost()


    :rtype: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.encodedPassword()


    :rtype: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.encodedPath()


    :rtype: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.encodedQuery()


    :rtype: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.encodedQueryItemValue(key)


    :param key: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.encodedQueryItems()


    :rtype: 







.. method:: PySide.QtCore.QUrl.encodedUserName()


    :rtype: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.errorString()


    :rtype: unicode







.. method:: PySide.QtCore.QUrl.fragment()


    :rtype: unicode







.. staticmethod:: PySide.QtCore.QUrl.fromAce(arg__1)


    :param arg__1: :class:`PySide.QtCore.QByteArray`
    :rtype: unicode







.. staticmethod:: PySide.QtCore.QUrl.fromEncoded(url, mode)


    :param url: :class:`PySide.QtCore.QByteArray`
    :param mode: :attr:`PySide.QtCore.QUrl.ParsingMode`
    :rtype: :class:`PySide.QtCore.QUrl`







.. staticmethod:: PySide.QtCore.QUrl.fromEncoded(url)


    :param url: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.QUrl`







.. staticmethod:: PySide.QtCore.QUrl.fromLocalFile(localfile)


    :param localfile: unicode
    :rtype: :class:`PySide.QtCore.QUrl`







.. staticmethod:: PySide.QtCore.QUrl.fromPercentEncoding(arg__1)


    :param arg__1: :class:`PySide.QtCore.QByteArray`
    :rtype: unicode







.. staticmethod:: PySide.QtCore.QUrl.fromPunycode(arg__1)


    :param arg__1: :class:`PySide.QtCore.QByteArray`
    :rtype: unicode







.. staticmethod:: PySide.QtCore.QUrl.fromUserInput(userInput)


    :param userInput: unicode
    :rtype: :class:`PySide.QtCore.QUrl`







.. method:: PySide.QtCore.QUrl.hasEncodedQueryItem(key)


    :param key: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.hasFragment()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.hasQuery()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.hasQueryItem(key)


    :param key: unicode
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.host()


    :rtype: unicode







.. staticmethod:: PySide.QtCore.QUrl.idnWhitelist()


    :rtype: list of strings







.. method:: PySide.QtCore.QUrl.isEmpty()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.isLocalFile()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.isParentOf(url)


    :param url: :class:`PySide.QtCore.QUrl`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.isRelative()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.isValid()


    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.__ne__(url)


    :param url: :class:`PySide.QtCore.QUrl`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.__lt__(url)


    :param url: :class:`PySide.QtCore.QUrl`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.__eq__(url)


    :param url: :class:`PySide.QtCore.QUrl`
    :rtype: :class:`PySide.QtCore.bool`







.. method:: PySide.QtCore.QUrl.password()


    :rtype: unicode







.. method:: PySide.QtCore.QUrl.path()


    :rtype: unicode







.. method:: PySide.QtCore.QUrl.port()


    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QUrl.port(defaultPort)


    :param defaultPort: :class:`PySide.QtCore.int`
    :rtype: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QUrl.queryItemValue(key)


    :param key: unicode
    :rtype: unicode







.. method:: PySide.QtCore.QUrl.queryItems()


    :rtype: 







.. method:: PySide.QtCore.QUrl.queryPairDelimiter()


    :rtype: :class:`PySide.QtCore.char`







.. method:: PySide.QtCore.QUrl.queryValueDelimiter()


    :rtype: :class:`PySide.QtCore.char`







.. method:: PySide.QtCore.QUrl.removeAllEncodedQueryItems(key)


    :param key: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.removeAllQueryItems(key)


    :param key: unicode







.. method:: PySide.QtCore.QUrl.removeEncodedQueryItem(key)


    :param key: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.removeQueryItem(key)


    :param key: unicode







.. method:: PySide.QtCore.QUrl.resolved(relative)


    :param relative: :class:`PySide.QtCore.QUrl`
    :rtype: :class:`PySide.QtCore.QUrl`







.. method:: PySide.QtCore.QUrl.scheme()


    :rtype: unicode







.. method:: PySide.QtCore.QUrl.setAuthority(authority)


    :param authority: unicode







.. method:: PySide.QtCore.QUrl.setEncodedFragment(fragment)


    :param fragment: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.setEncodedHost(host)


    :param host: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.setEncodedPassword(password)


    :param password: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.setEncodedPath(path)


    :param path: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.setEncodedQuery(query)


    :param query: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.setEncodedQueryItems(query)


    :param query: 







.. method:: PySide.QtCore.QUrl.setEncodedUrl(url, mode)


    :param url: :class:`PySide.QtCore.QByteArray`
    :param mode: :attr:`PySide.QtCore.QUrl.ParsingMode`







.. method:: PySide.QtCore.QUrl.setEncodedUrl(url)


    :param url: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.setEncodedUserName(userName)


    :param userName: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.setFragment(fragment)


    :param fragment: unicode







.. method:: PySide.QtCore.QUrl.setHost(host)


    :param host: unicode







.. staticmethod:: PySide.QtCore.QUrl.setIdnWhitelist(arg__1)


    :param arg__1: list of strings







.. method:: PySide.QtCore.QUrl.setPassword(password)


    :param password: unicode







.. method:: PySide.QtCore.QUrl.setPath(path)


    :param path: unicode







.. method:: PySide.QtCore.QUrl.setPort(port)


    :param port: :class:`PySide.QtCore.int`







.. method:: PySide.QtCore.QUrl.setQueryDelimiters(valueDelimiter, pairDelimiter)


    :param valueDelimiter: :class:`PySide.QtCore.char`
    :param pairDelimiter: :class:`PySide.QtCore.char`







.. method:: PySide.QtCore.QUrl.setQueryItems(query)


    :param query: 







.. method:: PySide.QtCore.QUrl.setScheme(scheme)


    :param scheme: unicode







.. method:: PySide.QtCore.QUrl.setUrl(url, mode)


    :param url: unicode
    :param mode: :attr:`PySide.QtCore.QUrl.ParsingMode`







.. method:: PySide.QtCore.QUrl.setUrl(url)


    :param url: unicode







.. method:: PySide.QtCore.QUrl.setUserInfo(userInfo)


    :param userInfo: unicode







.. method:: PySide.QtCore.QUrl.setUserName(userName)


    :param userName: unicode







.. method:: PySide.QtCore.QUrl.swap(other)


    :param other: :class:`PySide.QtCore.QUrl`







.. staticmethod:: PySide.QtCore.QUrl.toAce(arg__1)


    :param arg__1: unicode
    :rtype: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.toEncoded([options=QUrl.None])


    :param options: :class:`PySide.QtCore.QUrl.FormattingOptions`
    :rtype: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.toLocalFile()


    :rtype: unicode







.. staticmethod:: PySide.QtCore.QUrl.toPercentEncoding(arg__1[, exclude=QByteArray()[, include=QByteArray()]])


    :param arg__1: unicode
    :param exclude: :class:`PySide.QtCore.QByteArray`
    :param include: :class:`PySide.QtCore.QByteArray`
    :rtype: :class:`PySide.QtCore.QByteArray`







.. staticmethod:: PySide.QtCore.QUrl.toPunycode(arg__1)


    :param arg__1: unicode
    :rtype: :class:`PySide.QtCore.QByteArray`







.. method:: PySide.QtCore.QUrl.toString([options=QUrl.None])


    :param options: :class:`PySide.QtCore.QUrl.FormattingOptions`
    :rtype: unicode







.. method:: PySide.QtCore.QUrl.topLevelDomain()


    :rtype: unicode







.. method:: PySide.QtCore.QUrl.userInfo()


    :rtype: unicode







.. method:: PySide.QtCore.QUrl.userName()


    :rtype: unicode








