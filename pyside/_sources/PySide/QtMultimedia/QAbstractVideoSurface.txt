.. module:: PySide.QtMultimedia
.. _QAbstractVideoSurface:

QAbstractVideoSurface
*********************

.. inheritance-diagram:: QAbstractVideoSurface
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`error<PySide.QtMultimedia.QAbstractVideoSurface.error>` ()
*    def :meth:`isActive<PySide.QtMultimedia.QAbstractVideoSurface.isActive>` ()
*    def :meth:`setError<PySide.QtMultimedia.QAbstractVideoSurface.setError>` (error)
*    def :meth:`surfaceFormat<PySide.QtMultimedia.QAbstractVideoSurface.surfaceFormat>` ()


Virtual functions
^^^^^^^^^^^^^^^^^
.. container:: function_list

*    def :meth:`isFormatSupported<PySide.QtMultimedia.QAbstractVideoSurface.isFormatSupported>` (format)
*    def :meth:`nearestFormat<PySide.QtMultimedia.QAbstractVideoSurface.nearestFormat>` (format)
*    def :meth:`present<PySide.QtMultimedia.QAbstractVideoSurface.present>` (frame)
*    def :meth:`start<PySide.QtMultimedia.QAbstractVideoSurface.start>` (format)
*    def :meth:`stop<PySide.QtMultimedia.QAbstractVideoSurface.stop>` ()
*    def :meth:`supportedPixelFormats<PySide.QtMultimedia.QAbstractVideoSurface.supportedPixelFormats>` ([handleType=QAbstractVideoBuffer.NoHandle])


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`activeChanged<PySide.QtMultimedia.QAbstractVideoSurface.activeChanged>` (active)
*    def :meth:`supportedFormatsChanged<PySide.QtMultimedia.QAbstractVideoSurface.supportedFormatsChanged>` ()
*    def :meth:`surfaceFormatChanged<PySide.QtMultimedia.QAbstractVideoSurface.surfaceFormatChanged>` (format)


Detailed Description
--------------------



    The :class:`PySide.QtMultimedia.QAbstractVideoSurface` class is a base class for video presentation surfaces.

    The :class:`PySide.QtMultimedia.QAbstractVideoSurface` class defines the standard interface that video producers use to inter-operate with video presentation surfaces. It is not supposed to be instantiated directly. Instead, you should subclass it to create new video surfaces.

    A video surface presents a continuous stream of identically formatted frames, where the format of each frame is compatible with a stream format supplied when starting a presentation.

    A list of pixel formats a surface can present is given by the :meth:`PySide.QtMultimedia.QAbstractVideoSurface.supportedPixelFormats` function, and the :meth:`PySide.QtMultimedia.QAbstractVideoSurface.isFormatSupported` function will test if a video surface format is supported. If a format is not supported the :meth:`PySide.QtMultimedia.QAbstractVideoSurface.nearestFormat` function may be able to suggest a similar format. For example if a surface supports fixed set of resolutions it may suggest the smallest supported resolution that contains the proposed resolution.

    The :meth:`PySide.QtMultimedia.QAbstractVideoSurface.start` function takes a supported format and enables a video surface. Once started a surface will begin displaying the frames it receives in the :meth:`PySide.QtMultimedia.QAbstractVideoSurface.present` function. Surfaces may hold a reference to the buffer of a presented video frame until a new frame is presented or streaming is stopped. The :meth:`PySide.QtMultimedia.QAbstractVideoSurface.stop` function will disable a surface and a release any video buffers it holds references to.


.. class:: QAbstractVideoSurface([parent=None])

    :param parent: :class:`PySide.QtCore.QObject`

    Constructs a video surface with the given ``parent`` .


.. attribute:: PySide.QtMultimedia.QAbstractVideoSurface.Error

    This enum describes the errors that may be returned by the :meth:`PySide.QtMultimedia.QAbstractVideoSurface.error` function.

    +--------------------------------------------+----------------------------------------------------------------+
    |Constant                                    |Description                                                     |
    +============================================+================================================================+
    |QAbstractVideoSurface.NoError               |No error occurred.                                              |
    +--------------------------------------------+----------------------------------------------------------------+
    |QAbstractVideoSurface.UnsupportedFormatError|A video format was not supported.                               |
    +--------------------------------------------+----------------------------------------------------------------+
    |QAbstractVideoSurface.IncorrectFormatError  |A video frame was not compatible with the format of the surface.|
    +--------------------------------------------+----------------------------------------------------------------+
    |QAbstractVideoSurface.StoppedError          |The surface has not been started.                               |
    +--------------------------------------------+----------------------------------------------------------------+
    |QAbstractVideoSurface.ResourceError         |The surface could not allocate some resource.                   |
    +--------------------------------------------+----------------------------------------------------------------+


.. method:: PySide.QtMultimedia.QAbstractVideoSurface.activeChanged(active)


    :param active: :class:`PySide.QtCore.bool`






.. method:: PySide.QtMultimedia.QAbstractVideoSurface.error()


    :rtype: :attr:`PySide.QtMultimedia.QAbstractVideoSurface.Error`




    Returns the last error that occurred.

    If a surface fails to :meth:`PySide.QtMultimedia.QAbstractVideoSurface.start` , or stops unexpectedly this function can be called to discover what error occurred.

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractVideoSurface.setError` 


.. method:: PySide.QtMultimedia.QAbstractVideoSurface.isActive()


    :rtype: :class:`PySide.QtCore.bool`




    Indicates whether a video surface has been started.

    Returns true if the surface has been started, and false otherwise.



.. method:: PySide.QtMultimedia.QAbstractVideoSurface.isFormatSupported(format)


    :param format: :class:`PySide.QtMultimedia.QVideoSurfaceFormat`
    :rtype: :class:`PySide.QtCore.bool`




    Tests a video surface ``format`` to determine if a surface can accept it.

    Returns true if the format is supported by the surface, and false otherwise.



.. method:: PySide.QtMultimedia.QAbstractVideoSurface.nearestFormat(format)


    :param format: :class:`PySide.QtMultimedia.QVideoSurfaceFormat`
    :rtype: :class:`PySide.QtMultimedia.QVideoSurfaceFormat`




    Returns a supported video surface format that is similar to ``format`` .

    A similar surface format is one that has the same :meth:`pixel format<PySide.QtMultimedia.QVideoSurfaceFormat.pixelFormat>` and :meth:`handle type<PySide.QtMultimedia.QVideoSurfaceFormat.handleType>` but differs in some of the other properties. For example if there are restrictions on the :meth:`frame sizes<PySide.QtMultimedia.QVideoSurfaceFormat.frameSize>` a video surface can accept it may suggest a format with a larger frame size and a :meth:`PySide.QtMultimedia.QVideoSurfaceFormat.viewport` the size of the original frame size.

    If the format is already supported it will be returned unchanged, or if there is no similar supported format an invalid format will be returned.



.. method:: PySide.QtMultimedia.QAbstractVideoSurface.present(frame)


    :param frame: :class:`PySide.QtMultimedia.QVideoFrame`
    :rtype: :class:`PySide.QtCore.bool`




    Presents a video ``frame`` .

    Returns true if the frame was presented, and false if an error occurred.

    Not all surfaces will block until the presentation of a frame has completed. Calling :meth:`PySide.QtMultimedia.QAbstractVideoSurface.present` on a non-blocking surface may fail if called before the presentation of a previous frame has completed. In such cases the surface may not return to a ready state until it's had an opportunity to process events.

    If :meth:`PySide.QtMultimedia.QAbstractVideoSurface.present` fails for any other reason the surface will immediately enter the stopped state and an :meth:`PySide.QtMultimedia.QAbstractVideoSurface.error` value will be set.

    A video surface must be in the started state for :meth:`PySide.QtMultimedia.QAbstractVideoSurface.present` to succeed, and the format of the video frame must be compatible with the current video surface format.

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractVideoSurface.error` 


.. method:: PySide.QtMultimedia.QAbstractVideoSurface.setError(error)


    :param error: :attr:`PySide.QtMultimedia.QAbstractVideoSurface.Error`




    Sets the value of :meth:`PySide.QtMultimedia.QAbstractVideoSurface.error` to ``error`` .

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractVideoSurface.error` 


.. method:: PySide.QtMultimedia.QAbstractVideoSurface.start(format)


    :param format: :class:`PySide.QtMultimedia.QVideoSurfaceFormat`
    :rtype: :class:`PySide.QtCore.bool`




    Starts a video surface presenting ``format`` frames.

    Returns true if the surface was started, and false if an error occurred.

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractVideoSurface.isActive`  :meth:`PySide.QtMultimedia.QAbstractVideoSurface.stop` 


.. method:: PySide.QtMultimedia.QAbstractVideoSurface.stop()






    Stops a video surface presenting frames and releases any resources acquired in :meth:`PySide.QtMultimedia.QAbstractVideoSurface.start` .

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractVideoSurface.isActive`  :meth:`PySide.QtMultimedia.QAbstractVideoSurface.start` 


.. method:: PySide.QtMultimedia.QAbstractVideoSurface.supportedFormatsChanged()








.. method:: PySide.QtMultimedia.QAbstractVideoSurface.supportedPixelFormats([handleType=QAbstractVideoBuffer.NoHandle])


    :param handleType: :attr:`PySide.QtMultimedia.QAbstractVideoBuffer.HandleType`
    :rtype: 







.. method:: PySide.QtMultimedia.QAbstractVideoSurface.surfaceFormat()


    :rtype: :class:`PySide.QtMultimedia.QVideoSurfaceFormat`




    Returns the format of a video surface.



.. method:: PySide.QtMultimedia.QAbstractVideoSurface.surfaceFormatChanged(format)


    :param format: :class:`PySide.QtMultimedia.QVideoSurfaceFormat`







