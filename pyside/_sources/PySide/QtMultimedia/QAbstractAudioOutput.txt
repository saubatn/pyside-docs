.. module:: PySide.QtMultimedia
.. _QAbstractAudioOutput:

QAbstractAudioOutput
********************

.. inheritance-diagram:: QAbstractAudioOutput
    :parts: 2

Detailed Description
--------------------



    The :class:`PySide.QtMultimedia.QAbstractAudioOutput` class provides access for :class:`PySide.QtMultimedia.QAudioOutput` to access the audio device provided by the plugin.

    :class:`PySide.QtMultimedia.QAbstractAudioOutput` implements audio functionality for :class:`PySide.QtMultimedia.QAudioOutput` , i.e., :class:`PySide.QtMultimedia.QAudioOutput` routes function calls to :class:`PySide.QtMultimedia.QAbstractAudioOutput` . For a description of the functionality that is implemented, see the :class:`PySide.QtMultimedia.QAudioOutput` class and function descriptions.

    .. seealso::  :class:`PySide.QtMultimedia.QAudioOutput` 

.. class:: QAbstractAudioOutput()




.. method:: PySide.QtMultimedia.QAbstractAudioOutput.bufferSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the audio buffer size in bytes.

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractAudioOutput.setBufferSize` 


.. method:: PySide.QtMultimedia.QAbstractAudioOutput.bytesFree()


    :rtype: :class:`PySide.QtCore.int`




    Returns the free space available in bytes in the audio buffer.



.. method:: PySide.QtMultimedia.QAbstractAudioOutput.elapsedUSecs()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the milliseconds since :meth:`PySide.QtMultimedia.QAbstractAudioOutput.start` was called, including time in Idle and suspend states.



.. method:: PySide.QtMultimedia.QAbstractAudioOutput.error()


    :rtype: :attr:`PySide.QtMultimedia.QAudio.Error`




    Returns the error state.



.. method:: PySide.QtMultimedia.QAbstractAudioOutput.format()


    :rtype: :class:`PySide.QtMultimedia.QAudioFormat`




    Returns the :class:`PySide.QtMultimedia.QAudioFormat` being used.



.. method:: PySide.QtMultimedia.QAbstractAudioOutput.notify()








.. method:: PySide.QtMultimedia.QAbstractAudioOutput.notifyInterval()


    :rtype: :class:`PySide.QtCore.int`




    Returns the notify interval in milliseconds.

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractAudioOutput.setNotifyInterval` 


.. method:: PySide.QtMultimedia.QAbstractAudioOutput.periodSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the period size in bytes.



.. method:: PySide.QtMultimedia.QAbstractAudioOutput.processedUSecs()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the amount of audio data processed since :meth:`PySide.QtMultimedia.QAbstractAudioOutput.start` was called in milliseconds.



.. method:: PySide.QtMultimedia.QAbstractAudioOutput.reset()






    Drops all audio data in the buffers, resets buffers to zero.



.. method:: PySide.QtMultimedia.QAbstractAudioOutput.resume()






    Resumes processing audio data after a :meth:`PySide.QtMultimedia.QAbstractAudioOutput.suspend`



.. method:: PySide.QtMultimedia.QAbstractAudioOutput.setBufferSize(value)


    :param value: :class:`PySide.QtCore.int`




    Sets the audio buffer size to ``value`` in bytes.

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractAudioOutput.bufferSize` 


.. method:: PySide.QtMultimedia.QAbstractAudioOutput.setNotifyInterval(milliSeconds)


    :param milliSeconds: :class:`PySide.QtCore.int`




    Sets the interval for :meth:`PySide.QtMultimedia.QAbstractAudioOutput.notify` signal to be emitted. This is based on the ``ms`` of audio data processed not on actual real-time. The resolution of the timer is platform specific.

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractAudioOutput.notifyInterval` 


.. method:: PySide.QtMultimedia.QAbstractAudioOutput.start(device)


    :param device: :class:`PySide.QtCore.QIODevice`
    :rtype: :class:`PySide.QtCore.QIODevice`




    Uses the ``device`` as the :class:`PySide.QtCore.QIODevice` to transfer data. If ``device`` is null then the class creates an internal :class:`PySide.QtCore.QIODevice` . Returns a pointer to the :class:`PySide.QtCore.QIODevice` being used to handle the data transfer. This :class:`PySide.QtCore.QIODevice` can be used to :meth:`~PySide.QtMultimedia.QAbstractAudioOutput.write` audio data directly. Passing a :class:`PySide.QtCore.QIODevice` allows the data to be transferred without any extra code.



.. method:: PySide.QtMultimedia.QAbstractAudioOutput.state()


    :rtype: :attr:`PySide.QtMultimedia.QAudio.State`




    Returns the state of audio processing.



.. method:: PySide.QtMultimedia.QAbstractAudioOutput.stateChanged(arg__1)


    :param arg__1: :attr:`PySide.QtMultimedia.QAudio.State`






.. method:: PySide.QtMultimedia.QAbstractAudioOutput.stop()






    Stops the audio output.



.. method:: PySide.QtMultimedia.QAbstractAudioOutput.suspend()






    Stops processing audio data, preserving buffered audio data.




