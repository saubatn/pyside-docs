.. module:: PySide.QtMultimedia
.. _QAudioInput:

QAudioInput
***********

.. inheritance-diagram:: QAudioInput
    :parts: 2

Synopsis
--------

Functions
^^^^^^^^^
.. container:: function_list

*    def :meth:`bufferSize<PySide.QtMultimedia.QAudioInput.bufferSize>` ()
*    def :meth:`bytesReady<PySide.QtMultimedia.QAudioInput.bytesReady>` ()
*    def :meth:`elapsedUSecs<PySide.QtMultimedia.QAudioInput.elapsedUSecs>` ()
*    def :meth:`error<PySide.QtMultimedia.QAudioInput.error>` ()
*    def :meth:`format<PySide.QtMultimedia.QAudioInput.format>` ()
*    def :meth:`notifyInterval<PySide.QtMultimedia.QAudioInput.notifyInterval>` ()
*    def :meth:`periodSize<PySide.QtMultimedia.QAudioInput.periodSize>` ()
*    def :meth:`processedUSecs<PySide.QtMultimedia.QAudioInput.processedUSecs>` ()
*    def :meth:`reset<PySide.QtMultimedia.QAudioInput.reset>` ()
*    def :meth:`resume<PySide.QtMultimedia.QAudioInput.resume>` ()
*    def :meth:`setBufferSize<PySide.QtMultimedia.QAudioInput.setBufferSize>` (bytes)
*    def :meth:`setNotifyInterval<PySide.QtMultimedia.QAudioInput.setNotifyInterval>` (milliSeconds)
*    def :meth:`start<PySide.QtMultimedia.QAudioInput.start>` ()
*    def :meth:`start<PySide.QtMultimedia.QAudioInput.start>` (device)
*    def :meth:`state<PySide.QtMultimedia.QAudioInput.state>` ()
*    def :meth:`stop<PySide.QtMultimedia.QAudioInput.stop>` ()
*    def :meth:`suspend<PySide.QtMultimedia.QAudioInput.suspend>` ()


Signals
^^^^^^^
.. container:: function_list

*    def :meth:`notify<PySide.QtMultimedia.QAudioInput.notify>` ()
*    def :meth:`stateChanged<PySide.QtMultimedia.QAudioInput.stateChanged>` (arg__1)


Detailed Description
--------------------



    The :class:`PySide.QtMultimedia.QAudioInput` class provides an interface for receiving audio data from an audio input device.

    You can construct an audio input with the system's :meth:`default audio input device<PySide.QtMultimedia.QAudioDeviceInfo.defaultInputDevice>` . It is also possible to create :class:`PySide.QtMultimedia.QAudioInput` with a specific :class:`PySide.QtMultimedia.QAudioDeviceInfo` . When you create the audio input, you should also send in the :class:`PySide.QtMultimedia.QAudioFormat` to be used for the recording (see the :class:`PySide.QtMultimedia.QAudioFormat` class description for details).

    To record to a file:

    :class:`PySide.QtMultimedia.QAudioInput` lets you record audio with an audio input device. The default constructor of this class will use the systems default audio device, but you can also specify a :class:`PySide.QtMultimedia.QAudioDeviceInfo` for a specific device. You also need to pass in the :class:`PySide.QtMultimedia.QAudioFormat` in which you wish to record.

    Starting up the :class:`PySide.QtMultimedia.QAudioInput` is simply a matter of calling :meth:`PySide.QtMultimedia.QAudioInput.start` with a :class:`PySide.QtCore.QIODevice` opened for writing. For instance, to record to a file, you can:

    ::

            @Slot(QAudio.State)
            def stateChanged(self, newState):
                if newState == QAudio.StopState:
                    if self.output.error() != QAudio.NoError:
                        # Perform error handling
                    else:
                        # Normal stop
            ...
            @Slot(QAudio.State)
            def stateChanged(self, newState):
                if newState == QAudio.StopState:
                    if self.input.error() != QAudio.NoError:
                        # Error handling


    This will start recording if the format specified is supported by the input device (you can check this with :meth:`QAudioDeviceInfo.isFormatSupported()<PySide.QtMultimedia.QAudioDeviceInfo.isFormatSupported>` . In case there are any snags, use the :meth:`PySide.QtMultimedia.QAudioInput.error` function to check what went wrong. We stop recording in the ``stopRecording()`` slot.

    ::

                format = QAudioFormat()
                format.setFrequency(44100)


    At any point in time, :class:`PySide.QtMultimedia.QAudioInput` will be in one of four states: active, suspended, stopped, or idle. These states are specified by the :attr:`QAudio.State` enum. You can request a state change directly through :meth:`PySide.QtMultimedia.QAudioInput.suspend` , :meth:`PySide.QtMultimedia.QAudioInput.resume` , :meth:`PySide.QtMultimedia.QAudioInput.stop` , :meth:`PySide.QtMultimedia.QAudioInput.reset` , and :meth:`PySide.QtMultimedia.QAudioInput.start` . The current state is reported by :meth:`PySide.QtMultimedia.QAudioInput.state` . :class:`PySide.QtMultimedia.QAudioOutput` will also signal you when the state changes ( :meth:`PySide.QtMultimedia.QAudioInput.stateChanged` ).

    :class:`PySide.QtMultimedia.QAudioInput` provides several ways of measuring the time that has passed since the :meth:`PySide.QtMultimedia.QAudioInput.start` of the recording. The ``processedUSecs()`` function returns the length of the stream in microseconds written, i.e., it leaves out the times the audio input was suspended or idle. The :meth:`PySide.QtMultimedia.QAudioInput.elapsedUSecs` function returns the time elapsed since :meth:`PySide.QtMultimedia.QAudioInput.start` was called regardless of which states the :class:`PySide.QtMultimedia.QAudioInput` has been in.

    If an error should occur, you can fetch its reason with :meth:`PySide.QtMultimedia.QAudioInput.error` . The possible error reasons are described by the :attr:`QAudio.Error` enum. The :class:`PySide.QtMultimedia.QAudioInput` will enter the :attr:`StoppedState<QAudio.State>` when an error is encountered. Connect to the :meth:`PySide.QtMultimedia.QAudioInput.stateChanged` signal to handle the error:

    ::

                format.setSampleType(QAudioFormat.SignedInt)

                info = QAudioDeviceInfo(QAudioDeviceInfo.defaultOutputDevice())

                if not info.isFormatSupported(format):
                    format = info.nearestFormat(format)


    .. _PySide.QtMultimedia.QAudioInput_symbian-platform-security-requirements:



Symbian Platform Security Requirements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    On Symbian, processes which use this class must have the ``UserEnvironment`` platform security capability. If the client process lacks this capability, calls to either overload of :meth:`PySide.QtMultimedia.QAudioInput.start` will fail. This failure is indicated by the :class:`PySide.QtMultimedia.QAudioInput` object setting its :meth:`PySide.QtMultimedia.QAudioInput.error` value to :attr:`QAudio.OpenError<QAudio.Error>` and then emitting a :meth:`PySide.QtMultimedia.QAudioInput.stateChanged` ( :attr:`QAudio.StoppedState<QAudio.State>` ) signal.

    Platform security capabilities are added via the :ref:`TARGET.CAPABILITY<qmake-variable-reference.html>` qmake variable.

    .. seealso::  :class:`PySide.QtMultimedia.QAudioOutput`  :class:`PySide.QtMultimedia.QAudioDeviceInfo` 

.. class:: QAudioInput(audioDeviceInfo[, format=QAudioFormat()[, parent=None]])
           QAudioInput([format=QAudioFormat()[, parent=None]])

    :param format: :class:`PySide.QtMultimedia.QAudioFormat`
    :param parent: :class:`PySide.QtCore.QObject`
    :param audioDeviceInfo: :class:`PySide.QtMultimedia.QAudioDeviceInfo`

    Construct a new audio input and attach it to ``parent`` . The device referenced by ``audioDevice`` is used with the input ``format`` parameters.


    Construct a new audio input and attach it to ``parent`` . The default audio input device is used with the output ``format`` parameters.


.. method:: PySide.QtMultimedia.QAudioInput.bufferSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the audio buffer size in milliseconds.

    If called before :meth:`PySide.QtMultimedia.QAudioInput.start` , returns platform default value. If called before :meth:`PySide.QtMultimedia.QAudioInput.start` but :meth:`PySide.QtMultimedia.QAudioInput.setBufferSize` was called prior, returns value set by :meth:`PySide.QtMultimedia.QAudioInput.setBufferSize` . If called after :meth:`PySide.QtMultimedia.QAudioInput.start` , returns the actual buffer size being used. This may not be what was set previously by :meth:`PySide.QtMultimedia.QAudioInput.setBufferSize` .

    .. seealso::  :meth:`PySide.QtMultimedia.QAudioInput.setBufferSize` 


.. method:: PySide.QtMultimedia.QAudioInput.bytesReady()


    :rtype: :class:`PySide.QtCore.int`




    Returns the amount of audio data available to read in bytes.

    NOTE: returned value is only valid while in :attr:`QAudio.ActiveState<QAudio.State>` or :attr:`QAudio.IdleState<QAudio.State>` state, otherwise returns zero.



.. method:: PySide.QtMultimedia.QAudioInput.elapsedUSecs()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the microseconds since :meth:`PySide.QtMultimedia.QAudioInput.start` was called, including time in Idle and Suspend states.



.. method:: PySide.QtMultimedia.QAudioInput.error()


    :rtype: :attr:`PySide.QtMultimedia.QAudio.Error`




    Returns the error state.



.. method:: PySide.QtMultimedia.QAudioInput.format()


    :rtype: :class:`PySide.QtMultimedia.QAudioFormat`




    Returns the :class:`PySide.QtMultimedia.QAudioFormat` being used.



.. method:: PySide.QtMultimedia.QAudioInput.notify()








.. method:: PySide.QtMultimedia.QAudioInput.notifyInterval()


    :rtype: :class:`PySide.QtCore.int`




    Returns the notify interval in milliseconds.

    .. seealso::  :meth:`PySide.QtMultimedia.QAudioInput.setNotifyInterval` 


.. method:: PySide.QtMultimedia.QAudioInput.periodSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the period size in bytes.

    Note: This is the recommended read size in bytes.



.. method:: PySide.QtMultimedia.QAudioInput.processedUSecs()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the amount of audio data processed since :meth:`PySide.QtMultimedia.QAudioInput.start` was called in microseconds.



.. method:: PySide.QtMultimedia.QAudioInput.reset()






    Drops all audio data in the buffers, resets buffers to zero.



.. method:: PySide.QtMultimedia.QAudioInput.resume()






    Resumes processing audio data after a :meth:`PySide.QtMultimedia.QAudioInput.suspend` .

    Sets :meth:`PySide.QtMultimedia.QAudioInput.error` to :attr:`QAudio.NoError<QAudio.Error>` . Sets :meth:`PySide.QtMultimedia.QAudioInput.state` to :attr:`QAudio.ActiveState<QAudio.State>` if you previously called start( :class:`PySide.QtCore.QIODevice` \*). Sets :meth:`PySide.QtMultimedia.QAudioInput.state` to :attr:`QAudio.IdleState<QAudio.State>` if you previously called :meth:`PySide.QtMultimedia.QAudioInput.start` . emits :meth:`PySide.QtMultimedia.QAudioInput.stateChanged` signal.



.. method:: PySide.QtMultimedia.QAudioInput.setBufferSize(bytes)


    :param bytes: :class:`PySide.QtCore.int`




    Sets the audio buffer size to ``value`` milliseconds.

    Note: This function can be called anytime before :meth:`PySide.QtMultimedia.QAudioInput.start` , calls to this are ignored after :meth:`PySide.QtMultimedia.QAudioInput.start` . It should not be assumed that the buffer size set is the actual buffer size used, calling :meth:`PySide.QtMultimedia.QAudioInput.bufferSize` anytime after :meth:`PySide.QtMultimedia.QAudioInput.start` will return the actual buffer size being used.

    .. seealso::  :meth:`PySide.QtMultimedia.QAudioInput.bufferSize` 


.. method:: PySide.QtMultimedia.QAudioInput.setNotifyInterval(milliSeconds)


    :param milliSeconds: :class:`PySide.QtCore.int`




    Sets the interval for :meth:`PySide.QtMultimedia.QAudioInput.notify` signal to be emitted. This is based on the ``ms`` of audio data processed not on actual real-time. The minimum resolution of the timer is platform specific and values should be checked with :meth:`PySide.QtMultimedia.QAudioInput.notifyInterval` to confirm actual value being used.

    .. seealso::  :meth:`PySide.QtMultimedia.QAudioInput.notifyInterval` 


.. method:: PySide.QtMultimedia.QAudioInput.start(device)


    :param device: :class:`PySide.QtCore.QIODevice`




    Uses the ``device`` as the :class:`PySide.QtCore.QIODevice` to transfer data. Passing a :class:`PySide.QtCore.QIODevice` allows the data to be transferred without any extra code. All that is required is to open the :class:`PySide.QtCore.QIODevice` . :class:`PySide.QtMultimedia.QAudioInput` does not take ownership of ``device`` .

    The :class:`PySide.QtMultimedia.QAudioInput` will write to the device when new data is available. You can subclass :class:`PySide.QtCore.QIODevice` and reimplement :meth:`PySide.QtCore.QIODevice.writeData` if you wish to access the data. If you simply want to save data to a file, you can pass a :class:`PySide.QtCore.QFile` to this function.

    If able to successfully get audio data from the systems audio device the :meth:`PySide.QtMultimedia.QAudioInput.state` is set to either :attr:`QAudio.ActiveState<QAudio.State>` or :attr:`QAudio.IdleState<QAudio.State>` , :meth:`PySide.QtMultimedia.QAudioInput.error` is set to :attr:`QAudio.NoError<QAudio.Error>` and the :meth:`PySide.QtMultimedia.QAudioInput.stateChanged` signal is emitted.

    If a problem occurs during this process the :meth:`PySide.QtMultimedia.QAudioInput.error` is set to :attr:`QAudio.OpenError<QAudio.Error>` , :meth:`PySide.QtMultimedia.QAudioInput.state` is set to :attr:`QAudio.StoppedState<QAudio.State>` and :meth:`PySide.QtMultimedia.QAudioInput.stateChanged` signal is emitted.

    :class:`~PySide.QtMultimedia.QAudioInput#Symbian Platform Security Requirements`

    .. seealso::  :class:`PySide.QtCore.QIODevice` 


.. method:: PySide.QtMultimedia.QAudioInput.start()


    :rtype: :class:`PySide.QtCore.QIODevice`




    Returns a pointer to a new :class:`PySide.QtCore.QIODevice` that will be used to handle the data transfer. This :class:`PySide.QtCore.QIODevice` can be used to :meth:`PySide.QtCore.QIODevice.read` audio data directly. You will typically connect to the :meth:`PySide.QtCore.QIODevice.readyRead` signal, and read from the device in the slot you connect to. :class:`PySide.QtMultimedia.QAudioInput` keeps ownership of the device.

    If able to access the systems audio device the :meth:`PySide.QtMultimedia.QAudioInput.state` is set to :attr:`QAudio.IdleState<QAudio.State>` , :meth:`PySide.QtMultimedia.QAudioInput.error` is set to :attr:`QAudio.NoError<QAudio.Error>` and the :meth:`PySide.QtMultimedia.QAudioInput.stateChanged` signal is emitted.

    If a problem occurs during this process the :meth:`PySide.QtMultimedia.QAudioInput.error` is set to :attr:`QAudio.OpenError<QAudio.Error>` , :meth:`PySide.QtMultimedia.QAudioInput.state` is set to :attr:`QAudio.StoppedState<QAudio.State>` and :meth:`PySide.QtMultimedia.QAudioInput.stateChanged` signal is emitted.

    :class:`~PySide.QtMultimedia.QAudioInput#Symbian Platform Security Requirements`

    .. seealso::  :class:`PySide.QtCore.QIODevice` 


.. method:: PySide.QtMultimedia.QAudioInput.state()


    :rtype: :attr:`PySide.QtMultimedia.QAudio.State`




    Returns the state of audio processing.



.. method:: PySide.QtMultimedia.QAudioInput.stateChanged(arg__1)


    :param arg__1: :attr:`PySide.QtMultimedia.QAudio.State`






.. method:: PySide.QtMultimedia.QAudioInput.stop()






    Stops the audio input, detaching from the system resource.

    Sets :meth:`PySide.QtMultimedia.QAudioInput.error` to :attr:`QAudio.NoError<QAudio.Error>` , :meth:`PySide.QtMultimedia.QAudioInput.state` to :attr:`QAudio.StoppedState<QAudio.State>` and emit :meth:`PySide.QtMultimedia.QAudioInput.stateChanged` signal.



.. method:: PySide.QtMultimedia.QAudioInput.suspend()






    Stops processing audio data, preserving buffered audio data.

    Sets :meth:`PySide.QtMultimedia.QAudioInput.error` to :attr:`QAudio.NoError<QAudio.Error>` , :meth:`PySide.QtMultimedia.QAudioInput.state` to :attr:`QAudio.SuspendedState<QAudio.State>` and emit :meth:`PySide.QtMultimedia.QAudioInput.stateChanged` signal.




