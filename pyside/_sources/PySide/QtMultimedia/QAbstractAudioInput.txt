.. module:: PySide.QtMultimedia
.. _QAbstractAudioInput:

QAbstractAudioInput
*******************

.. inheritance-diagram:: QAbstractAudioInput
    :parts: 2

Detailed Description
--------------------



    The :class:`PySide.QtMultimedia.QAbstractAudioInput` class provides access for :class:`PySide.QtMultimedia.QAudioInput` to access the audio device provided by the plugin.

    QAudioDeviceInput keeps an instance of :class:`PySide.QtMultimedia.QAbstractAudioInput` and routes calls to functions of the same name to :class:`PySide.QtMultimedia.QAbstractAudioInput` . This means that it is :class:`PySide.QtMultimedia.QAbstractAudioInput` that implements the audio functionality. For a description of the functionality, see the :class:`PySide.QtMultimedia.QAudioInput` class description.

    .. seealso::  :class:`PySide.QtMultimedia.QAudioInput` 

.. class:: QAbstractAudioInput()




.. method:: PySide.QtMultimedia.QAbstractAudioInput.bufferSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the audio buffer size in milliseconds.

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractAudioInput.setBufferSize` 


.. method:: PySide.QtMultimedia.QAbstractAudioInput.bytesReady()


    :rtype: :class:`PySide.QtCore.int`




    Returns the amount of audio data available to read in bytes.



.. method:: PySide.QtMultimedia.QAbstractAudioInput.elapsedUSecs()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the milliseconds since :meth:`PySide.QtMultimedia.QAbstractAudioInput.start` was called, including time in Idle and suspend states.



.. method:: PySide.QtMultimedia.QAbstractAudioInput.error()


    :rtype: :attr:`PySide.QtMultimedia.QAudio.Error`




    Returns the error state.



.. method:: PySide.QtMultimedia.QAbstractAudioInput.format()


    :rtype: :class:`PySide.QtMultimedia.QAudioFormat`




    Returns the :class:`PySide.QtMultimedia.QAudioFormat` being used



.. method:: PySide.QtMultimedia.QAbstractAudioInput.notify()








.. method:: PySide.QtMultimedia.QAbstractAudioInput.notifyInterval()


    :rtype: :class:`PySide.QtCore.int`




    Returns the notify interval in milliseconds.

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractAudioInput.setNotifyInterval` 


.. method:: PySide.QtMultimedia.QAbstractAudioInput.periodSize()


    :rtype: :class:`PySide.QtCore.int`




    Returns the period size in bytes.



.. method:: PySide.QtMultimedia.QAbstractAudioInput.processedUSecs()


    :rtype: :class:`PySide.QtCore.qint64`




    Returns the amount of audio data processed since :meth:`PySide.QtMultimedia.QAbstractAudioInput.start` was called in milliseconds.



.. method:: PySide.QtMultimedia.QAbstractAudioInput.reset()






    Drops all audio data in the buffers, resets buffers to zero.



.. method:: PySide.QtMultimedia.QAbstractAudioInput.resume()






    Resumes processing audio data after a :meth:`PySide.QtMultimedia.QAbstractAudioInput.suspend` .



.. method:: PySide.QtMultimedia.QAbstractAudioInput.setBufferSize(value)


    :param value: :class:`PySide.QtCore.int`




    Sets the audio buffer size to ``value`` in milliseconds.

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractAudioInput.bufferSize` 


.. method:: PySide.QtMultimedia.QAbstractAudioInput.setNotifyInterval(milliSeconds)


    :param milliSeconds: :class:`PySide.QtCore.int`




    Sets the interval for :meth:`PySide.QtMultimedia.QAbstractAudioInput.notify` signal to be emitted. This is based on the ``ms`` of audio data processed not on actual real-time. The resolution of the timer is platform specific.

    .. seealso::  :meth:`PySide.QtMultimedia.QAbstractAudioInput.notifyInterval` 


.. method:: PySide.QtMultimedia.QAbstractAudioInput.start(device)


    :param device: :class:`PySide.QtCore.QIODevice`
    :rtype: :class:`PySide.QtCore.QIODevice`




    Uses the ``device`` as the :class:`PySide.QtCore.QIODevice` to transfer data. If ``device`` is null then the class creates an internal :class:`PySide.QtCore.QIODevice` . Returns a pointer to the :class:`PySide.QtCore.QIODevice` being used to handle the data transfer. This :class:`PySide.QtCore.QIODevice` can be used to read() audio data directly. Passing a :class:`PySide.QtCore.QIODevice` allows the data to be transferred without any extra code.



.. method:: PySide.QtMultimedia.QAbstractAudioInput.state()


    :rtype: :attr:`PySide.QtMultimedia.QAudio.State`




    Returns the state of audio processing.



.. method:: PySide.QtMultimedia.QAbstractAudioInput.stateChanged(arg__1)


    :param arg__1: :attr:`PySide.QtMultimedia.QAudio.State`






.. method:: PySide.QtMultimedia.QAbstractAudioInput.stop()






    Stops the audio input.



.. method:: PySide.QtMultimedia.QAbstractAudioInput.suspend()






    Stops processing audio data, preserving buffered audio data.




